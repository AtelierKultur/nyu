// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Planetscale doesn't support foreign keys yet, so we need to use this
}

model Protocol {
  id            String      @id @default(cuid())
  hash          String      @unique
  name          String
  schemaVersion Int
  description   String?
  importedAt    DateTime    @default(now())
  lastModified  DateTime
  stages        Json
  codebook      Json
  assets        Asset[]
  interviews    Interview[]
  active        Boolean     @default(false)
}

model Asset {
  id         String   @id @default(cuid())
  assetId    String // from manifest
  type       String // from manifest
  source     String // from manifest
  alias      String // name as from manifest
  key        String // from upload thing
  url        String // from upload thing
  name       String // from upload thing
  size       Int // from upload thing
  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  protocolId String // from db

  @@index([protocolId])
}

model Interview {
  id            String      @id @default(cuid()) // Cannot be bigint because we want to obfuscate the id
  startTime     DateTime    @default(now())
  finishTime    DateTime?
  exportTime    DateTime?
  lastUpdated   DateTime    @updatedAt
  network       Json
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String      @unique
  protocol      Protocol    @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  protocolId    String      @map("protocolId")
  currentStep   Int         @default(0)

  @@index([protocolId])
}

model Participant {
  id         String      @id @unique @default(cuid())
  identifier String      @unique
  interviews Interview[]
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  auth_session Session[]
  key          Key[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model AppSettings {
  configured                Boolean   @default(false)
  initializedAt             DateTime  @default(now())
  configuredAt              DateTime?
  allowAnonymousRecruitment Boolean   @default(false)

  @@id([configured, initializedAt])
}
