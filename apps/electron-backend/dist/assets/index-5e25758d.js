(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const u of o.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&n(u)}).observe(document,{childList:!0,subtree:!0});function t(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(i){if(i.ep)return;i.ep=!0;const o=t(i);fetch(i.href,o)}})();function br(r){return r}function wr(r){return r.length===0?br:r.length===1?r[0]:function(t){return r.reduce((n,i)=>i(n),t)}}function K(r){const e={subscribe(t){let n=null,i=!1,o=!1,u=!1;function a(){if(n===null){u=!0;return}o||(o=!0,typeof n=="function"?n():n&&n.unsubscribe())}return n=r({next(s){var c;i||(c=t.next)==null||c.call(t,s)},error(s){var c;i||(i=!0,(c=t.error)==null||c.call(t,s),a())},complete(){var s;i||(i=!0,(s=t.complete)==null||s.call(t),a())}}),u&&a(),{unsubscribe:a}},pipe(...t){return wr(t)(e)}};return e}function Or(r){return e=>{let t=0,n=null;const i=[];function o(){n||(n=e.subscribe({next(a){var s;for(const c of i)(s=c.next)==null||s.call(c,a)},error(a){var s;for(const c of i)(s=c.error)==null||s.call(c,a)},complete(){var a;for(const s of i)(a=s.complete)==null||a.call(s)}}))}function u(){if(t===0&&n){const a=n;n=null,a.unsubscribe()}}return{subscribe(a){return t++,i.push(a),o(),{unsubscribe(){t--,u();const s=i.findIndex(c=>c===a);s>-1&&i.splice(s,1)}}}}}}function Ar(r){return e=>({subscribe(t){return e.subscribe({next(n){var i,o;(i=r.next)==null||i.call(r,n),(o=t.next)==null||o.call(t,n)},error(n){var i,o;(i=r.error)==null||i.call(r,n),(o=t.error)==null||o.call(t,n)},complete(){var n,i;(n=r.complete)==null||n.call(r),(i=t.complete)==null||i.call(t)}})}})}class F extends Error{constructor(e){super(e),this.name="ObservableAbortError",Object.setPrototypeOf(this,F.prototype)}}function Er(r){let e;return{promise:new Promise((n,i)=>{let o=!1;function u(){o||(o=!0,i(new F("This operation was aborted.")),a.unsubscribe())}const a=r.subscribe({next(s){o=!0,n(s),u()},error(s){o=!0,i(s),u()},complete(){o=!0,u()}});e=u}),abort:e}}class g extends Error{static from(e,t={}){return e instanceof Error?e.name==="TRPCClientError"?e:new g(e.message,{...t,cause:e,result:null}):new g(e.error.message??"",{...t,cause:void 0,result:e})}constructor(e,t){var i,o;const n=t==null?void 0:t.cause;super(e,{cause:n}),this.meta=t==null?void 0:t.meta,this.cause=n,this.shape=(i=t==null?void 0:t.result)==null?void 0:i.error,this.data=(o=t==null?void 0:t.result)==null?void 0:o.error.data,this.name="TRPCClientError",Object.setPrototypeOf(this,g.prototype)}}function Pr(r,e){if("error"in r){const n=e.transformer.deserialize(r.error);return{ok:!1,error:{...r,error:n}}}return{ok:!0,result:{...r.result,...(!r.result.type||r.result.type==="data")&&{type:"data",data:e.transformer.deserialize(r.result.data)}}}}function G(r){return!!r&&!Array.isArray(r)&&typeof r=="object"}function Tr(r,e){let t;try{t=Pr(r,e)}catch{throw new g("Unable to transform response from server")}if(!t.ok&&(!G(t.error.error)||typeof t.error.error.code!="number"))throw new g("Badly formatted response from server");if(t.ok&&!G(t.result))throw new g("Badly formatted response from server");return t}function Ir(r){return K(e=>{function t(i=0,o=r.op){const u=r.links[i];if(!u)throw new Error("No more links to execute - did you forget to add an ending link?");return u({op:o,next(s){return t(i+1,s)}})}return t().subscribe(e)})}const J=()=>{};function rr(r,e){return new Proxy(J,{get(n,i){if(!(typeof i!="string"||i==="then"))return rr(r,[...e,i])},apply(n,i,o){return r({args:o,path:e})}})}const xr=r=>rr(r,[]),_r=r=>new Proxy(J,{get(e,t){if(!(typeof t!="string"||t==="then"))return r(t)}});function er(){return typeof window<"u"?window:globalThis}function Rr(r){return r??er().AbortController??null}function Sr(r){if(r)return r;const e=er(),t=e.fetch;if(t)return typeof t.bind=="function"?t.bind(e):t;throw new Error("No fetch implementation found")}function Nr(r){const e=r.headers||(()=>({}));return{url:r.url,fetch:Sr(r.fetch),AbortController:Rr(r.AbortController),headers:typeof e=="function"?e:()=>e}}function qr(r){const e={};for(let t=0;t<r.length;t++){const n=r[t];e[t]=n}return e}const Cr={query:"GET",mutation:"POST"};function tr(r){return"input"in r?r.runtime.transformer.serialize(r.input):qr(r.inputs.map(e=>r.runtime.transformer.serialize(e)))}function nr(r){let e=r.url+"/"+r.path;const t=[];if("inputs"in r&&t.push("batch=1"),r.type==="query"){const n=tr(r);n!==void 0&&t.push(`input=${encodeURIComponent(JSON.stringify(n))}`)}return t.length&&(e+="?"+t.join("&")),e}function kr(r){if(r.type==="query")return;const e=tr(r);return e!==void 0?JSON.stringify(e):void 0}function $r(r){const{type:e}=r,t=r.AbortController?new r.AbortController:null;return{promise:new Promise((o,u)=>{const a=nr(r),s=kr(r),c={};Promise.resolve(r.headers()).then(l=>{if(e==="subscription")throw new Error("Subscriptions should use wsLink");return r.fetch(a,{method:Cr[e],signal:t==null?void 0:t.signal,body:s,headers:{"content-type":"application/json",...l}})}).then(l=>(c.response=l,l.json())).then(l=>{o({json:l,meta:c})}).catch(u)}),cancel:()=>{t==null||t.abort()}}}const C=()=>{throw new Error("Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new")};function k(r){let e=null,t=null;const n=()=>{clearTimeout(t),t=null,e=null};function i(a){const s=[[]];let c=0;for(;;){const l=a[c];if(!l)break;const m=s[s.length-1];if(l.aborted){l.reject(new Error("Aborted")),c++;continue}if(r.validate(m.concat(l).map(d=>d.key))){m.push(l),c++;continue}if(m.length===0){l.reject(new Error("Input is too big for a single dispatch")),c++;continue}s.push([])}return s}function o(){const a=i(e);n();for(const s of a){if(!s.length)continue;const c={items:s,cancel:C};for(const f of s)f.batch=c;const{promise:l,cancel:m}=r.fetch(c.items.map(f=>f.key));c.cancel=m,l.then(f=>{for(let d=0;d<f.length;d++){const y=f[d],h=c.items[d];h.resolve(y),h.batch=null}}).catch(f=>{for(const d of c.items)d.reject(f),d.batch=null})}}function u(a){const s={aborted:!1,key:a,batch:null,resolve:C,reject:C},c=new Promise((m,f)=>{s.reject=f,s.resolve=m,e||(e=[]),e.push(s)});return t||(t=setTimeout(o)),{promise:c,cancel:()=>{var m;s.aborted=!0,(m=s.batch)!=null&&m.items.every(f=>f.aborted)&&(s.batch.cancel(),s.batch=null)}}}return{load:u}}function Vr(r){const e=Nr(r);return t=>{const n=r.maxURLLength||1/0,i=c=>({validate:f=>{if(n===1/0)return!0;const d=f.map(I=>I.path).join(","),y=f.map(I=>I.input);return nr({...e,runtime:t,type:c,path:d,inputs:y}).length<=n},fetch:f=>{const d=f.map(w=>w.path).join(","),y=f.map(w=>w.input),{promise:h,cancel:I}=$r({...e,runtime:t,type:c,path:d,inputs:y});return{promise:h.then(w=>(Array.isArray(w.json)?w.json:f.map(()=>w.json)).map(vr=>({meta:w.meta,json:vr}))),cancel:I}}}),o=k(i("query")),u=k(i("mutation")),a=k(i("subscription")),s={query:o,subscription:a,mutation:u};return({op:c})=>K(l=>{const m=s[c.type],{promise:f,cancel:d}=m.load(c);return f.then(y=>{const h=Tr(y.json,t);if(!h.ok){l.error(g.from(h.error,{meta:y.meta}));return}l.next({context:y.meta,result:h.result}),l.complete()}).catch(y=>l.error(g.from(y))),()=>{d()}})}}const jr={query:["72e3ff","3fb0d8"],mutation:["c5a3fc","904dfc"],subscription:["ff49e1","d83fbe"]},zr=(r=console)=>e=>{const{direction:t,input:n,type:i,path:o,context:u,id:a}=e,[s,c]=jr[i],l=`
    background-color: #${t==="up"?s:c}; 
    color: ${t==="up"?"black":"white"};
    padding: 2px;
  `,m=["%c",t==="up"?">>":"<<",i,`#${a}`,`%c${o}%c`,"%O"],f=[l,`${l}; font-weight: bold;`,`${l}; font-weight: normal;`];e.direction==="up"?f.push({input:n,context:u}):f.push({input:n,result:e.result,elapsedMs:e.elapsedMs,context:u});const d=e.direction==="down"&&e.result&&(e.result instanceof Error||"error"in e.result.result)?"error":"log";r[d].apply(null,[m.join(" ")].concat(f))};function Lr(r={}){const{enabled:e=()=>!0}=r,{logger:t=zr(r.console)}=r;return()=>({op:n,next:i})=>K(o=>{e({...n,direction:"up"})&&t({...n,direction:"up"});const u=Date.now();function a(s){const c=Date.now()-u;e({...n,direction:"down",result:s})&&t({...n,direction:"down",elapsedMs:c,result:s})}return i(n).pipe(Ar({next(s){a(s)},error(s){a(s)}})).subscribe(o)})}class Br{$request({type:e,input:t,path:n,context:i={}}){return Ir({links:this.links,op:{id:++this.requestId,type:e,path:n,input:t,context:i}}).pipe(Or())}requestAsPromise(e){const t=this.$request(e),{promise:n,abort:i}=Er(t);return new Promise((u,a)=>{var s;(s=e.signal)==null||s.addEventListener("abort",i),n.then(c=>{u(c.result.data)}).catch(c=>{a(g.from(c))})})}query(e,t,n){return this.requestAsPromise({type:"query",path:e,input:t,context:n==null?void 0:n.context,signal:n==null?void 0:n.signal})}mutation(e,t,n){return this.requestAsPromise({type:"mutation",path:e,input:t,context:n==null?void 0:n.context,signal:n==null?void 0:n.signal})}subscription(e,t,n){return this.$request({type:"subscription",path:e,input:t,context:n==null?void 0:n.context}).subscribe({next(o){var u,a,s;o.result.type==="started"?(u=n.onStarted)==null||u.call(n):o.result.type==="stopped"?(a=n.onStopped)==null||a.call(n):(s=n.onData)==null||s.call(n,o.result.data)},error(o){var u;(u=n.onError)==null||u.call(n,o)},complete(){var o;(o=n.onComplete)==null||o.call(n)}})}constructor(e){this.requestId=0;function t(){const n=e.transformer;return n?"input"in n?{serialize:n.input.serialize,deserialize:n.output.deserialize}:n:{serialize:i=>i,deserialize:i=>i}}this.runtime={transformer:t()},this.links=e.links.map(n=>n(this.runtime))}}const Ur={query:"query",mutate:"mutation",subscribe:"subscription"};function Dr(r){return _r(e=>r.hasOwnProperty(e)?r[e]:xr(({path:t,args:n})=>{const i=[e,...t],o=i.pop(),u=Ur[o],a=i.join(".");return r[u](a,...n)}))}function Mr(r){const e=new Br(r);return Dr(e)}var Kr=function(){function r(){this.keyToValue=new Map,this.valueToKey=new Map}return r.prototype.set=function(e,t){this.keyToValue.set(e,t),this.valueToKey.set(t,e)},r.prototype.getByKey=function(e){return this.keyToValue.get(e)},r.prototype.getByValue=function(e){return this.valueToKey.get(e)},r.prototype.clear=function(){this.keyToValue.clear(),this.valueToKey.clear()},r}(),ir=function(){function r(e){this.generateIdentifier=e,this.kv=new Kr}return r.prototype.register=function(e,t){this.kv.getByValue(e)||(t||(t=this.generateIdentifier(e)),this.kv.set(t,e))},r.prototype.clear=function(){this.kv.clear()},r.prototype.getIdentifier=function(e){return this.kv.getByValue(e)},r.prototype.getValue=function(e){return this.kv.getByKey(e)},r}(),Fr=globalThis&&globalThis.__extends||function(){var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},r(e,t)};return function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");r(e,t);function n(){this.constructor=e}e.prototype=t===null?Object.create(t):(n.prototype=t.prototype,new n)}}(),Gr=function(r){Fr(e,r);function e(){var t=r.call(this,function(n){return n.name})||this;return t.classToAllowedProps=new Map,t}return e.prototype.register=function(t,n){typeof n=="object"?(n.allowProps&&this.classToAllowedProps.set(t,n.allowProps),r.prototype.register.call(this,t,n.identifier)):r.prototype.register.call(this,t,n)},e.prototype.getAllowedProps=function(t){return this.classToAllowedProps.get(t)},e}(ir),Hr=globalThis&&globalThis.__read||function(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var n=t.call(r),i,o=[],u;try{for(;(e===void 0||e-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(a){u={error:a}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(u)throw u.error}}return o};function Wr(r){if("values"in Object)return Object.values(r);var e=[];for(var t in r)r.hasOwnProperty(t)&&e.push(r[t]);return e}function Qr(r,e){var t=Wr(r);if("find"in t)return t.find(e);for(var n=t,i=0;i<n.length;i++){var o=n[i];if(e(o))return o}}function T(r,e){Object.entries(r).forEach(function(t){var n=Hr(t,2),i=n[0],o=n[1];return e(o,i)})}function N(r,e){return r.indexOf(e)!==-1}function H(r,e){for(var t=0;t<r.length;t++){var n=r[t];if(e(n))return n}}var Xr=function(){function r(){this.transfomers={}}return r.prototype.register=function(e){this.transfomers[e.name]=e},r.prototype.findApplicable=function(e){return Qr(this.transfomers,function(t){return t.isApplicable(e)})},r.prototype.findByName=function(e){return this.transfomers[e]},r}(),Yr=function(r){return Object.prototype.toString.call(r).slice(8,-1)},or=function(r){return typeof r>"u"},Zr=function(r){return r===null},_=function(r){return typeof r!="object"||r===null||r===Object.prototype?!1:Object.getPrototypeOf(r)===null?!0:r.constructor===Object&&Object.getPrototypeOf(r)===Object.prototype},V=function(r){return _(r)&&Object.keys(r).length===0},A=function(r){return Array.isArray(r)},Jr=function(r){return typeof r=="string"},re=function(r){return typeof r=="number"&&!isNaN(r)},ee=function(r){return typeof r=="boolean"},te=function(r){return r instanceof RegExp},R=function(r){return r instanceof Map},S=function(r){return r instanceof Set},ur=function(r){return Yr(r)==="Symbol"},ne=function(r){return r instanceof Date&&!isNaN(r.valueOf())},ie=function(r){return r instanceof Error},W=function(r){return typeof r=="number"&&isNaN(r)},Q=function(r){return ee(r)||Zr(r)||or(r)||re(r)||Jr(r)||ur(r)},oe=function(r){return typeof r=="bigint"},ue=function(r){return r===1/0||r===-1/0},ae=function(r){return ArrayBuffer.isView(r)&&!(r instanceof DataView)},se=function(r){return r instanceof URL},ar=function(r){return r.replace(/\./g,"\\.")},$=function(r){return r.map(String).map(ar).join(".")},x=function(r){for(var e=[],t="",n=0;n<r.length;n++){var i=r.charAt(n),o=i==="\\"&&r.charAt(n+1)===".";if(o){t+=".",n++;continue}var u=i===".";if(u){e.push(t),t="";continue}t+=i}var a=t;return e.push(a),e},j=globalThis&&globalThis.__assign||function(){return j=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++){e=arguments[t];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=e[i])}return r},j.apply(this,arguments)},z=globalThis&&globalThis.__read||function(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var n=t.call(r),i,o=[],u;try{for(;(e===void 0||e-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(a){u={error:a}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(u)throw u.error}}return o},L=globalThis&&globalThis.__spreadArray||function(r,e){for(var t=0,n=e.length,i=r.length;t<n;t++,i++)r[i]=e[t];return r};function p(r,e,t,n){return{isApplicable:r,annotation:e,transform:t,untransform:n}}var sr=[p(or,"undefined",function(){return null},function(){}),p(oe,"bigint",function(r){return r.toString()},function(r){return typeof BigInt<"u"?BigInt(r):(console.error("Please add a BigInt polyfill."),r)}),p(ne,"Date",function(r){return r.toISOString()},function(r){return new Date(r)}),p(ie,"Error",function(r,e){var t={name:r.name,message:r.message};return e.allowedErrorProps.forEach(function(n){t[n]=r[n]}),t},function(r,e){var t=new Error(r.message);return t.name=r.name,t.stack=r.stack,e.allowedErrorProps.forEach(function(n){t[n]=r[n]}),t}),p(te,"regexp",function(r){return""+r},function(r){var e=r.slice(1,r.lastIndexOf("/")),t=r.slice(r.lastIndexOf("/")+1);return new RegExp(e,t)}),p(S,"set",function(r){return L([],z(r.values()))},function(r){return new Set(r)}),p(R,"map",function(r){return L([],z(r.entries()))},function(r){return new Map(r)}),p(function(r){return W(r)||ue(r)},"number",function(r){return W(r)?"NaN":r>0?"Infinity":"-Infinity"},Number),p(function(r){return r===0&&1/r===-1/0},"number",function(){return"-0"},Number),p(se,"URL",function(r){return r.toString()},function(r){return new URL(r)})];function q(r,e,t,n){return{isApplicable:r,annotation:e,transform:t,untransform:n}}var cr=q(function(r,e){if(ur(r)){var t=!!e.symbolRegistry.getIdentifier(r);return t}return!1},function(r,e){var t=e.symbolRegistry.getIdentifier(r);return["symbol",t]},function(r){return r.description},function(r,e,t){var n=t.symbolRegistry.getValue(e[1]);if(!n)throw new Error("Trying to deserialize unknown symbol");return n}),ce=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,Uint8ClampedArray].reduce(function(r,e){return r[e.name]=e,r},{}),lr=q(ae,function(r){return["typed-array",r.constructor.name]},function(r){return L([],z(r))},function(r,e){var t=ce[e[1]];if(!t)throw new Error("Trying to deserialize unknown typed array");return new t(r)});function fr(r,e){if(r!=null&&r.constructor){var t=!!e.classRegistry.getIdentifier(r.constructor);return t}return!1}var dr=q(fr,function(r,e){var t=e.classRegistry.getIdentifier(r.constructor);return["class",t]},function(r,e){var t=e.classRegistry.getAllowedProps(r.constructor);if(!t)return j({},r);var n={};return t.forEach(function(i){n[i]=r[i]}),n},function(r,e,t){var n=t.classRegistry.getValue(e[1]);if(!n)throw new Error("Trying to deserialize unknown class - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564");return Object.assign(Object.create(n.prototype),r)}),mr=q(function(r,e){return!!e.customTransformerRegistry.findApplicable(r)},function(r,e){var t=e.customTransformerRegistry.findApplicable(r);return["custom",t.name]},function(r,e){var t=e.customTransformerRegistry.findApplicable(r);return t.serialize(r)},function(r,e,t){var n=t.customTransformerRegistry.findByName(e[1]);if(!n)throw new Error("Trying to deserialize unknown custom value");return n.deserialize(r)}),le=[dr,cr,mr,lr],X=function(r,e){var t=H(le,function(i){return i.isApplicable(r,e)});if(t)return{value:t.transform(r,e),type:t.annotation(r,e)};var n=H(sr,function(i){return i.isApplicable(r,e)});if(n)return{value:n.transform(r,e),type:n.annotation}},yr={};sr.forEach(function(r){yr[r.annotation]=r});var fe=function(r,e,t){if(A(e))switch(e[0]){case"symbol":return cr.untransform(r,e,t);case"class":return dr.untransform(r,e,t);case"custom":return mr.untransform(r,e,t);case"typed-array":return lr.untransform(r,e,t);default:throw new Error("Unknown transformation: "+e)}else{var n=yr[e];if(!n)throw new Error("Unknown transformation: "+e);return n.untransform(r,t)}},P=function(r,e){for(var t=r.keys();e>0;)t.next(),e--;return t.next().value};function hr(r){if(N(r,"__proto__"))throw new Error("__proto__ is not allowed as a property");if(N(r,"prototype"))throw new Error("prototype is not allowed as a property");if(N(r,"constructor"))throw new Error("constructor is not allowed as a property")}var de=function(r,e){hr(e);for(var t=0;t<e.length;t++){var n=e[t];if(S(r))r=P(r,+n);else if(R(r)){var i=+n,o=+e[++t]==0?"key":"value",u=P(r,i);switch(o){case"key":r=u;break;case"value":r=r.get(u);break}}else r=r[n]}return r},B=function(r,e,t){if(hr(e),e.length===0)return t(r);for(var n=r,i=0;i<e.length-1;i++){var o=e[i];if(A(n)){var u=+o;n=n[u]}else if(_(n))n=n[o];else if(S(n)){var a=+o;n=P(n,a)}else if(R(n)){var s=i===e.length-2;if(s)break;var a=+o,c=+e[++i]==0?"key":"value",l=P(n,a);switch(c){case"key":n=l;break;case"value":n=n.get(l);break}}}var m=e[e.length-1];if((A(n)||_(n))&&(n[m]=t(n[m])),S(n)){var f=P(n,+m),d=t(f);f!==d&&(n.delete(f),n.add(d))}if(R(n)){var a=+e[e.length-2],y=P(n,a),c=+m==0?"key":"value";switch(c){case"key":{var h=t(y);n.set(h,n.get(y)),h!==y&&n.delete(y);break}case"value":{n.set(y,t(n.get(y)));break}}}return r},v=globalThis&&globalThis.__read||function(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var n=t.call(r),i,o=[],u;try{for(;(e===void 0||e-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(a){u={error:a}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(u)throw u.error}}return o},O=globalThis&&globalThis.__spreadArray||function(r,e){for(var t=0,n=e.length,i=r.length;t<n;t++,i++)r[i]=e[t];return r};function U(r,e,t){if(t===void 0&&(t=[]),!!r){if(!A(r)){T(r,function(u,a){return U(u,e,O(O([],v(t)),v(x(a))))});return}var n=v(r,2),i=n[0],o=n[1];o&&T(o,function(u,a){U(u,e,O(O([],v(t)),v(x(a))))}),e(i,t)}}function me(r,e,t){return U(e,function(n,i){r=B(r,i,function(o){return fe(o,n,t)})}),r}function ye(r,e){function t(u,a){var s=de(r,x(a));u.map(x).forEach(function(c){r=B(r,c,function(){return s})})}if(A(e)){var n=v(e,2),i=n[0],o=n[1];i.forEach(function(u){r=B(r,x(u),function(){return r})}),o&&T(o,t)}else T(e,t);return r}var he=function(r,e){return _(r)||A(r)||R(r)||S(r)||fr(r,e)};function pe(r,e,t){var n=t.get(r);n?n.push(e):t.set(r,[e])}function ge(r){var e={},t=void 0;return r.forEach(function(n){if(!(n.length<=1)){var i=v(n.map(function(a){return a.map(String)}).sort(function(a,s){return a.length-s.length})),o=i[0],u=i.slice(1);o.length===0?t=u.map($):e[$(o)]=u.map($)}}),t?V(e)?[t]:[t,e]:V(e)?void 0:e}var pr=function(r,e,t,n,i){var o;if(n===void 0&&(n=[]),i===void 0&&(i=[]),Q(r)||pe(r,n,e),!he(r,t)){var u=X(r,t);return u?{transformedValue:u.value,annotations:[u.type]}:{transformedValue:r}}if(N(i,r))return{transformedValue:null};var a=X(r,t),s=(o=a==null?void 0:a.value)!==null&&o!==void 0?o:r;Q(r)||(i=O(O([],v(i)),[r]));var c=A(s)?[]:{},l={};return T(s,function(m,f){var d=pr(m,e,t,O(O([],v(n)),[f]),i);c[f]=d.transformedValue,A(d.annotations)?l[f]=d.annotations:_(d.annotations)&&T(d.annotations,function(y,h){l[ar(f)+"."+h]=y})}),V(l)?{transformedValue:c,annotations:a?[a.type]:void 0}:{transformedValue:c,annotations:a?[a.type,l]:l}};function gr(r){return Object.prototype.toString.call(r).slice(8,-1)}function ve(r){if(gr(r)!=="Object")return!1;const e=Object.getPrototypeOf(r);return e.constructor===Object&&e===Object.prototype}function Y(r){return gr(r)==="Array"}function be(r,e,t,n,i){const o={}.propertyIsEnumerable.call(n,e)?"enumerable":"nonenumerable";o==="enumerable"&&(r[e]=t),i&&o==="nonenumerable"&&Object.defineProperty(r,e,{value:t,enumerable:!1,writable:!0,configurable:!0})}function D(r,e={}){if(Y(r))return r.map(i=>D(i,e));if(!ve(r))return r;const t=Object.getOwnPropertyNames(r),n=Object.getOwnPropertySymbols(r);return[...t,...n].reduce((i,o)=>{if(Y(e.props)&&!e.props.includes(o))return i;const u=r[o],a=D(u,e);return be(i,o,a,r,e.nonenumerable),i},{})}var E=globalThis&&globalThis.__assign||function(){return E=Object.assign||function(r){for(var e,t=1,n=arguments.length;t<n;t++){e=arguments[t];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=e[i])}return r},E.apply(this,arguments)},we=globalThis&&globalThis.__read||function(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var n=t.call(r),i,o=[],u;try{for(;(e===void 0||e-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(a){u={error:a}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(u)throw u.error}}return o},Oe=globalThis&&globalThis.__spreadArray||function(r,e){for(var t=0,n=e.length,i=r.length;t<n;t++,i++)r[i]=e[t];return r},b=function(){function r(){this.classRegistry=new Gr,this.symbolRegistry=new ir(function(e){var t;return(t=e.description)!==null&&t!==void 0?t:""}),this.customTransformerRegistry=new Xr,this.allowedErrorProps=[]}return r.prototype.serialize=function(e){var t=new Map,n=pr(e,t,this),i={json:n.transformedValue};n.annotations&&(i.meta=E(E({},i.meta),{values:n.annotations}));var o=ge(t);return o&&(i.meta=E(E({},i.meta),{referentialEqualities:o})),i},r.prototype.deserialize=function(e){var t=e.json,n=e.meta,i=D(t);return n!=null&&n.values&&(i=me(i,n.values,this)),n!=null&&n.referentialEqualities&&(i=ye(i,n.referentialEqualities)),i},r.prototype.stringify=function(e){return JSON.stringify(this.serialize(e))},r.prototype.parse=function(e){return this.deserialize(JSON.parse(e))},r.prototype.registerClass=function(e,t){this.classRegistry.register(e,t)},r.prototype.registerSymbol=function(e,t){this.symbolRegistry.register(e,t)},r.prototype.registerCustom=function(e,t){this.customTransformerRegistry.register(E({name:t},e))},r.prototype.allowErrorProps=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];(e=this.allowedErrorProps).push.apply(e,Oe([],we(t)))},r.defaultInstance=new r,r.serialize=r.defaultInstance.serialize.bind(r.defaultInstance),r.deserialize=r.defaultInstance.deserialize.bind(r.defaultInstance),r.stringify=r.defaultInstance.stringify.bind(r.defaultInstance),r.parse=r.defaultInstance.parse.bind(r.defaultInstance),r.registerClass=r.defaultInstance.registerClass.bind(r.defaultInstance),r.registerSymbol=r.defaultInstance.registerSymbol.bind(r.defaultInstance),r.registerCustom=r.defaultInstance.registerCustom.bind(r.defaultInstance),r.allowErrorProps=r.defaultInstance.allowErrorProps.bind(r.defaultInstance),r}();b.serialize;b.deserialize;b.stringify;b.parse;b.registerClass;b.registerCustom;b.registerSymbol;b.allowErrorProps;const M=Mr({transformer:b,links:[Lr(),Vr({url:"/trpc",fetch:async(r,e)=>{const t={url:r instanceof URL?r.toString():typeof r=="string"?r:r.url,method:r instanceof Request?r.method:e==null?void 0:e.method,headers:r instanceof Request?r.headers:e==null?void 0:e.headers,body:r instanceof Request?r.body:e==null?void 0:e.body},n=await window.appApi.trpc(t);return new Response(n.body,{status:n.status,headers:n.headers})}})]}),Z=document.getElementById("info");Z&&(Z.innerText=`This app is using Chrome (v${window.appApi.chrome()}), Node.js (v${window.appApi.node()}), and Electron (v${window.appApi.electron()})`);const Ae=async()=>{const r=await M.users.query();await M.userById.query(1);const e=document.getElementById("resp");e&&(e.innerText=JSON.stringify(r,null,2))};Ae();const Ee=async()=>{const r=await M.userCreate.mutate({name:"New User",dateCreated:new Date}),e=document.getElementById("resp");e&&(e.innerText=JSON.stringify(r,null,2))};window.addEventListener("DOMContentLoaded",()=>{const r=document.getElementById("add-user");r&&r.addEventListener("click",Ee)});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
