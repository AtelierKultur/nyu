{"version":3,"sources":["../src/trpc.ts","../src/routers/user.ts","../src/routers/protocols.ts","../src/routers/interviews.ts","../src/root.ts"],"sourcesContent":["/**\n * Adapted from: https://www.jumr.dev/blog/t3-turbo\n*/\n\nimport { initTRPC } from \"@trpc/server\";\nimport { ZodError } from \"zod\";\nimport { prisma } from \"@codaco/database\";\nimport superjson from \"superjson\";\n\n/**\n * This is the actual context you'll use in your router. It will be used to\n * process every request that goes through your tRPC endpoint\n * @link https://trpc.io/docs/context\n */\nexport const createTRPCContext = async () => {\n  // Inject prisma into the context\n  return {\n    prisma,\n  };\n};\n\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  isServer: true,\n  transformer: superjson, // Allows more types in JSON: https://github.com/blitz-js/superjson\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n\n/**\n * This is how you create new routers and subrouters in your tRPC API\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthed) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */\nexport const publicProcedure = t.procedure;\n","import { createTRPCRouter, publicProcedure } from \"../trpc\";\nimport { z } from \"zod\";\n\nexport const userRouter = createTRPCRouter({\n  all: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.user.findMany({ orderBy: { id: \"desc\" } });\n  }),\n  byId: publicProcedure.input(z.number()).query(({ ctx, input }) => {\n    return ctx.prisma.user.findFirst({ where: { id: input } });\n  }),\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1), email: z.string().min(1) }))\n    .mutation(({ ctx, input }) => {\n      return ctx.prisma.user.create({ data: input });\n    }),\n  delete: publicProcedure.input(z.number()).mutation(({ ctx, input }) => {\n    return ctx.prisma.user.delete({ where: { id: input } });\n  }),\n});","import { createTRPCRouter, publicProcedure } from \"../trpc\";\nimport { z } from \"zod\";\n\nexport const protocolsRouter = createTRPCRouter({\n  all: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.protocol.findMany({ orderBy: { id: \"desc\" } });\n  }),\n  byId: publicProcedure.input(z.number()).query(({ ctx, input }) => {\n    return ctx.prisma.protocol.findFirst({ where: { id: input } });\n  }),\n  byHash: publicProcedure.input(z.string()).query(({ ctx, input }) => {\n    return ctx.prisma.protocol.findFirst({ where: { hash: input } });\n  }),\n});","import { createTRPCRouter, publicProcedure } from \"../trpc\";\nimport { z } from \"zod\";\n\nexport const interviewsRouter = createTRPCRouter({\n  // Get all interviews, with optional sorting and pagination\n  all: publicProcedure\n    .input(\n      z.object({\n        orderBy: z\n          .object({\n            id: z.enum([\"asc\", \"desc\"]),\n            createdAt: z.enum([\"asc\", \"desc\"]),\n            updatedAt: z.enum([\"asc\", \"desc\"]),\n          })\n          .optional(),\n        skip: z.number().optional(),\n        take: z.number().optional(),\n      }).optional(),\n    )\n    .query(({ ctx, input }) => {\n      return ctx.prisma.interview.findMany({\n        ...input,\n        include: {\n          protocol: {\n            select: {\n              name: true,\n            },\n          }\n        }\n      });\n    }),\n  // Get a single interview by ID\n  get: publicProcedure\n    .input(z.number())\n    .query(({ ctx, input }) => {\n      return ctx.prisma.interview.findUnique({ where: { id: input } });\n    }\n    ),\n  // Create a new interview\n  create: publicProcedure\n    .input(\n      z.object({\n        caseId: z.string(),\n        protocol: z.string(),\n      }),\n    )\n    .mutation(({ ctx, input }) => {\n      return ctx.prisma.interview.create({\n        data: {\n          caseId: input.caseId,\n          protocol: input.protocol,\n        },\n      });\n    }\n    ),\n  // Update the network of an existing interview. Used to sync between stages.\n  updateNetwork: publicProcedure\n    .input(\n      z.object({\n        id: z.number(),\n        network: z.string(),\n      }),\n    )\n    .mutation(({ ctx, input }) => {\n      return ctx.prisma.interview.update({\n        where: { id: input.id },\n        data: {\n          network: input.network,\n        },\n      });\n    }),\n});","import { createTRPCRouter } from \"./trpc\";\nimport { userRouter } from \"./routers/user\";\nimport { protocolsRouter } from \"./routers/protocols\"\nimport { interviewsRouter } from \"./routers/interviews\"\n\nexport const appRouter = createTRPCRouter({\n  user: userRouter,\n  protocols: protocolsRouter,\n  interviews: interviewsRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;"],"mappings":"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","names":["z","z"]}