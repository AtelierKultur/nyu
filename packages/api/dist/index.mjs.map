{"version":3,"sources":["../src/trpc.ts","../src/routers/user.ts","../src/routers/protocols.ts","../src/root.ts"],"sourcesContent":["/**\n * Adapted from: https://www.jumr.dev/blog/t3-turbo\n*/\n\nimport { initTRPC } from \"@trpc/server\";\nimport { ZodError } from \"zod\";\nimport { prisma } from \"@codaco/database\";\nimport superjson from \"superjson\";\n\n/**\n * This is the actual context you'll use in your router. It will be used to\n * process every request that goes through your tRPC endpoint\n * @link https://trpc.io/docs/context\n */\nexport const createTRPCContext = async () => {\n  // Inject prisma into the context\n  return {\n    prisma,\n  };\n};\n\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  isServer: true,\n  transformer: superjson, // Allows more types in JSON: https://github.com/blitz-js/superjson\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n\n/**\n * This is how you create new routers and subrouters in your tRPC API\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthed) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */\nexport const publicProcedure = t.procedure;\n","import { createTRPCRouter, publicProcedure } from \"../trpc\";\nimport { z } from \"zod\";\n\nexport const userRouter = createTRPCRouter({\n  all: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.user.findMany({ orderBy: { id: \"desc\" } });\n  }),\n  byId: publicProcedure.input(z.string()).query(({ ctx, input }) => {\n    return ctx.prisma.user.findFirst({ where: { id: input } });\n  }),\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1), email: z.string().min(1) }))\n    .mutation(({ ctx, input }) => {\n      return ctx.prisma.user.create({ data: input });\n    }),\n  delete: publicProcedure.input(z.string().min(1)).mutation(({ ctx, input }) => {\n    return ctx.prisma.user.delete({ where: { id: input } });\n  }),\n});","import { createTRPCRouter, publicProcedure } from \"../trpc\";\nimport { z } from \"zod\";\n\nexport const protocolsRouter = createTRPCRouter({\n  all: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.protocol.findMany({ orderBy: { id: \"desc\" } });\n  }),\n  byId: publicProcedure.input(z.string()).query(({ ctx, input }) => {\n    return ctx.prisma.protocol.findFirst({ where: { id: input } });\n  }),\n  // createPresignedUrl: publicProcedure\n  //   .input(z.object({ filename: z.string().min(1) }))\n  //   .mutation(({ ctx, input }) => {\n  //     return ctx.prisma.protocol.create({ data: input });\n  //   }\n  // ),\n});","import { createTRPCRouter } from \"./trpc\";\nimport { userRouter } from \"./routers/user\";\nimport { protocolsRouter } from \"./routers/protocols\"\n\nexport const appRouter = createTRPCRouter({\n  user: userRouter,\n  protocols: protocolsRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;"],"mappings":";;;;AAIA,SAASA,gBAAgB;AACzB,SAASC,gBAAgB;AACzB,SAASC,cAAc;AACvB,OAAOC,eAAe;AAOf,IAAMC,oBAAoB,mCAAY;AAE3C,SAAO;IACLC;EACF;AACF,GALiC;AAOjC,IAAMC,IAAIC,SAASC,QAAO,EAA6BC,OAAO;EAC5DC,UAAU;EACVC,aAAaC;EACbC,eAAe,EAAEC,OAAOC,MAAK,GAAI;AAC/B,WAAO;MACL,GAAGD;MACHE,MAAM;QACJ,GAAGF,MAAME;QACTC,UACEF,MAAMG,iBAAiBC,WAAWJ,MAAMG,MAAME,QAAO,IAAK;MAC9D;IACF;EACF;AACF,CAAA;AAOO,IAAMC,mBAAmBf,EAAEgB;AAS3B,IAAMC,kBAAkBjB,EAAEkB;;;ACjDjC,SAASC,SAAS;AAEX,IAAMC,aAAaC,iBAAiB;EACzCC,KAAKC,gBAAgBC,MAAM,CAAC,EAAEC,IAAG,MAAO;AACtC,WAAOA,IAAIC,OAAOC,KAAKC,SAAS;MAAEC,SAAS;QAAEC,IAAI;MAAO;IAAE,CAAA;EAC5D,CAAA;EACAC,MAAMR,gBAAgBS,MAAMb,EAAEc,OAAM,CAAA,EAAIT,MAAM,CAAC,EAAEC,KAAKO,MAAK,MAAO;AAChE,WAAOP,IAAIC,OAAOC,KAAKO,UAAU;MAAEC,OAAO;QAAEL,IAAIE;MAAM;IAAE,CAAA;EAC1D,CAAA;EACAI,QAAQb,gBACLS,MAAMb,EAAEkB,OAAO;IAAEC,MAAMnB,EAAEc,OAAM,EAAGM,IAAI,CAAA;IAAIC,OAAOrB,EAAEc,OAAM,EAAGM,IAAI,CAAA;EAAG,CAAA,CAAA,EACnEE,SAAS,CAAC,EAAEhB,KAAKO,MAAK,MAAO;AAC5B,WAAOP,IAAIC,OAAOC,KAAKS,OAAO;MAAEM,MAAMV;IAAM,CAAA;EAC9C,CAAA;EACFW,QAAQpB,gBAAgBS,MAAMb,EAAEc,OAAM,EAAGM,IAAI,CAAA,CAAA,EAAIE,SAAS,CAAC,EAAEhB,KAAKO,MAAK,MAAO;AAC5E,WAAOP,IAAIC,OAAOC,KAAKgB,OAAO;MAAER,OAAO;QAAEL,IAAIE;MAAM;IAAE,CAAA;EACvD,CAAA;AACF,CAAA;;;ACjBA,SAASY,KAAAA,UAAS;AAEX,IAAMC,kBAAkBC,iBAAiB;EAC9CC,KAAKC,gBAAgBC,MAAM,CAAC,EAAEC,IAAG,MAAO;AACtC,WAAOA,IAAIC,OAAOC,SAASC,SAAS;MAAEC,SAAS;QAAEC,IAAI;MAAO;IAAE,CAAA;EAChE,CAAA;EACAC,MAAMR,gBAAgBS,MAAMb,GAAEc,OAAM,CAAA,EAAIT,MAAM,CAAC,EAAEC,KAAKO,MAAK,MAAO;AAChE,WAAOP,IAAIC,OAAOC,SAASO,UAAU;MAAEC,OAAO;QAAEL,IAAIE;MAAM;IAAE,CAAA;EAC9D,CAAA;AAOF,CAAA;;;ACZO,IAAMI,YAAYC,iBAAiB;EACxCC,MAAMC;EACNC,WAAWC;AACb,CAAA;","names":["initTRPC","ZodError","prisma","superjson","createTRPCContext","prisma","t","initTRPC","context","create","isServer","transformer","superjson","errorFormatter","shape","error","data","zodError","cause","ZodError","flatten","createTRPCRouter","router","publicProcedure","procedure","z","userRouter","createTRPCRouter","all","publicProcedure","query","ctx","prisma","user","findMany","orderBy","id","byId","input","string","findFirst","where","create","object","name","min","email","mutation","data","delete","z","protocolsRouter","createTRPCRouter","all","publicProcedure","query","ctx","prisma","protocol","findMany","orderBy","id","byId","input","string","findFirst","where","appRouter","createTRPCRouter","user","userRouter","protocols","protocolsRouter"]}