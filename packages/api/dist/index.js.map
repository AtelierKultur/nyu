{"version":3,"sources":["../index.ts","../src/trpc.ts","../src/routers/user.ts","../src/routers/protocols.ts","../src/root.ts"],"sourcesContent":["export { appRouter, type AppRouter } from \"./src/root\";\nexport { createTRPCContext } from \"./src/trpc\";","/**\n * Adapted from: https://www.jumr.dev/blog/t3-turbo\n*/\n\nimport { initTRPC } from \"@trpc/server\";\nimport { ZodError } from \"zod\";\nimport { prisma } from \"@codaco/database\";\nimport superjson from \"superjson\";\n\n/**\n * This is the actual context you'll use in your router. It will be used to\n * process every request that goes through your tRPC endpoint\n * @link https://trpc.io/docs/context\n */\nexport const createTRPCContext = async () => {\n  // Inject prisma into the context\n  return {\n    prisma,\n  };\n};\n\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  isServer: true,\n  transformer: superjson, // Allows more types in JSON: https://github.com/blitz-js/superjson\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n\n/**\n * This is how you create new routers and subrouters in your tRPC API\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthed) procedure\n *\n * This is the base piece you use to build new queries and mutations on your\n * tRPC API. It does not guarantee that a user querying is authorized, but you\n * can still access user session data if they are logged in\n */\nexport const publicProcedure = t.procedure;\n","import { createTRPCRouter, publicProcedure } from \"../trpc\";\nimport { z } from \"zod\";\n\nexport const userRouter = createTRPCRouter({\n  all: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.user.findMany({ orderBy: { id: \"desc\" } });\n  }),\n  byId: publicProcedure.input(z.number()).query(({ ctx, input }) => {\n    return ctx.prisma.user.findFirst({ where: { id: input } });\n  }),\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1), email: z.string().min(1) }))\n    .mutation(({ ctx, input }) => {\n      return ctx.prisma.user.create({ data: input });\n    }),\n  delete: publicProcedure.input(z.number()).mutation(({ ctx, input }) => {\n    return ctx.prisma.user.delete({ where: { id: input } });\n  }),\n});","import { createTRPCRouter, publicProcedure } from \"../trpc\";\nimport { z } from \"zod\";\n\nexport const protocolsRouter = createTRPCRouter({\n  all: publicProcedure.query(({ ctx }) => {\n    return ctx.prisma.protocol.findMany({ orderBy: { id: \"desc\" } });\n  }),\n  byId: publicProcedure.input(z.number()).query(({ ctx, input }) => {\n    return ctx.prisma.protocol.findFirst({ where: { id: input } });\n  }),\n  byHash: publicProcedure.input(z.string()).query(({ ctx, input }) => {\n    return ctx.prisma.protocol.findFirst({ where: { hash: input } });\n  }),\n});","import { createTRPCRouter } from \"./trpc\";\nimport { userRouter } from \"./routers/user\";\nimport { protocolsRouter } from \"./routers/protocols\"\n\nexport const appRouter = createTRPCRouter({\n  user: userRouter,\n  protocols: protocolsRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACIA,oBAAyB;AACzB,iBAAyB;AACzB,sBAAuB;AACvB,uBAAsB;AAOf,IAAM,oBAAoB,YAAY;AAE3C,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAEA,IAAM,IAAI,uBAAS,QAAkC,EAAE,OAAO;AAAA,EAC5D,UAAU;AAAA,EACV,aAAa,iBAAAA;AAAA;AAAA,EACb,eAAe,EAAE,OAAO,MAAM,GAAG;AAC/B,WAAO;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,QACJ,GAAG,MAAM;AAAA,QACT,UACE,MAAM,iBAAiB,sBAAW,MAAM,MAAM,QAAQ,IAAI;AAAA,MAC9D;AAAA,IACF;AAAA,EACF;AACF,CAAC;AAOM,IAAM,mBAAmB,EAAE;AAS3B,IAAM,kBAAkB,EAAE;;;ACjDjC,IAAAC,cAAkB;AAEX,IAAM,aAAa,iBAAiB;AAAA,EACzC,KAAK,gBAAgB,MAAM,CAAC,EAAE,IAAI,MAAM;AACtC,WAAO,IAAI,OAAO,KAAK,SAAS,EAAE,SAAS,EAAE,IAAI,OAAO,EAAE,CAAC;AAAA,EAC7D,CAAC;AAAA,EACD,MAAM,gBAAgB,MAAM,cAAE,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,MAAM;AAChE,WAAO,IAAI,OAAO,KAAK,UAAU,EAAE,OAAO,EAAE,IAAI,MAAM,EAAE,CAAC;AAAA,EAC3D,CAAC;AAAA,EACD,QAAQ,gBACL,MAAM,cAAE,OAAO,EAAE,MAAM,cAAE,OAAO,EAAE,IAAI,CAAC,GAAG,OAAO,cAAE,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EACrE,SAAS,CAAC,EAAE,KAAK,MAAM,MAAM;AAC5B,WAAO,IAAI,OAAO,KAAK,OAAO,EAAE,MAAM,MAAM,CAAC;AAAA,EAC/C,CAAC;AAAA,EACH,QAAQ,gBAAgB,MAAM,cAAE,OAAO,CAAC,EAAE,SAAS,CAAC,EAAE,KAAK,MAAM,MAAM;AACrE,WAAO,IAAI,OAAO,KAAK,OAAO,EAAE,OAAO,EAAE,IAAI,MAAM,EAAE,CAAC;AAAA,EACxD,CAAC;AACH,CAAC;;;ACjBD,IAAAC,cAAkB;AAEX,IAAM,kBAAkB,iBAAiB;AAAA,EAC9C,KAAK,gBAAgB,MAAM,CAAC,EAAE,IAAI,MAAM;AACtC,WAAO,IAAI,OAAO,SAAS,SAAS,EAAE,SAAS,EAAE,IAAI,OAAO,EAAE,CAAC;AAAA,EACjE,CAAC;AAAA,EACD,MAAM,gBAAgB,MAAM,cAAE,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,MAAM;AAChE,WAAO,IAAI,OAAO,SAAS,UAAU,EAAE,OAAO,EAAE,IAAI,MAAM,EAAE,CAAC;AAAA,EAC/D,CAAC;AAAA,EACD,QAAQ,gBAAgB,MAAM,cAAE,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,MAAM;AAClE,WAAO,IAAI,OAAO,SAAS,UAAU,EAAE,OAAO,EAAE,MAAM,MAAM,EAAE,CAAC;AAAA,EACjE,CAAC;AACH,CAAC;;;ACTM,IAAM,YAAY,iBAAiB;AAAA,EACxC,MAAM;AAAA,EACN,WAAW;AACb,CAAC;","names":["superjson","import_zod","import_zod"]}